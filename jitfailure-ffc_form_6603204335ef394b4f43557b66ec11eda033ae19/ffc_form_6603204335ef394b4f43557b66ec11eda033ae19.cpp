// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ['/home/msimon/anaconda3/envs/fenicsenv/include', 
//                                  '/home/msimon/anaconda3/envs/fenicsenv/include/eig
//                                  en3', '/home/msimon/anaconda3/envs/fenicsenv/inclu
//                                  de']
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   False
//  format:                         'ufc'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  no-evaluate_basis_derivatives:  True
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#include "ffc_form_6603204335ef394b4f43557b66ec11eda033ae19.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_exterior_facet_integral_main_2::ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_exterior_facet_integral_main_2() : ufc::exterior_facet_integral()
{

}

ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_exterior_facet_integral_main_2::~ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_exterior_facet_integral_main_2()
{

}

const std::vector<bool> & ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_exterior_facet_integral_main_2::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true, true});
return enabled;
}

void ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_exterior_facet_integral_main_2::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    std::size_t facet,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 0
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 0
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           0
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights1[1] = { 0.5 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE33_C0_D001_F_Q1[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE33_C0_D001_F_Q1[0][0][ic];
    const double J_c2 = coordinate_dofs[0] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[9] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[8] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[11] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[6] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[3] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[7] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[10] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[5] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[4] * FE33_C0_D001_F_Q1[0][0][1];
    const double w0_d1_c0 = w[0][0] * FE33_C0_D001_F_Q1[0][0][0] + w[0][2] * FE33_C0_D001_F_Q1[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE33_C0_D001_F_Q1[0][0][0] + w[0][3] * FE33_C0_D001_F_Q1[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE33_C0_D001_F_Q1[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE33_C0_D001_F_Q1[0][0][0] + w[0][6] * FE33_C0_D001_F_Q1[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE33_C0_D001_F_Q1[0][0][0] + w[0][7] * FE33_C0_D001_F_Q1[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE33_C0_D001_F_Q1[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE33_C0_D001_F_Q1[0][0][0] + w[0][10] * FE33_C0_D001_F_Q1[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE33_C0_D001_F_Q1[0][0][0] + w[0][11] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[4] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[7] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[10] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[5] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[8] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[11] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[3] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[6] * FE33_C0_D001_F_Q1[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE33_C0_D001_F_Q1[0][0][0] + coordinate_dofs[9] * FE33_C0_D001_F_Q1[0][0][1];
    alignas(32) double sp[232];
    sp[0] = J_c2 * J_c7;
    sp[1] = J_c8 * (-1 * J_c1);
    sp[2] = sp[0] + sp[1];
    sp[3] = J_c4 * J_c8;
    sp[4] = J_c5 * J_c7;
    sp[5] = sp[3] + -1 * sp[4];
    sp[6] = J_c0 * sp[5];
    sp[7] = J_c5 * J_c6;
    sp[8] = J_c3 * J_c8;
    sp[9] = sp[7] + -1 * sp[8];
    sp[10] = J_c1 * sp[9];
    sp[11] = sp[6] + sp[10];
    sp[12] = J_c3 * J_c7;
    sp[13] = J_c4 * J_c6;
    sp[14] = sp[12] + -1 * sp[13];
    sp[15] = J_c2 * sp[14];
    sp[16] = sp[11] + sp[15];
    sp[17] = sp[2] / sp[16];
    sp[18] = w0_d0_c0 * sp[17];
    sp[19] = J_c0 * J_c8;
    sp[20] = J_c6 * (-1 * J_c2);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[16];
    sp[23] = w0_d1_c0 * sp[22];
    sp[24] = sp[18] + sp[23];
    sp[25] = J_c1 * J_c6;
    sp[26] = J_c0 * J_c7;
    sp[27] = sp[25] + -1 * sp[26];
    sp[28] = sp[27] / sp[16];
    sp[29] = w0_d2_c0 * sp[28];
    sp[30] = sp[24] + sp[29];
    sp[31] = sp[30] + sp[30];
    sp[32] = J_c1 * J_c5;
    sp[33] = J_c2 * J_c4;
    sp[34] = sp[32] + -1 * sp[33];
    sp[35] = sp[34] / sp[16];
    sp[36] = w0_d0_c1 * sp[35];
    sp[37] = J_c2 * J_c3;
    sp[38] = J_c0 * J_c5;
    sp[39] = sp[37] + -1 * sp[38];
    sp[40] = sp[39] / sp[16];
    sp[41] = w0_d1_c1 * sp[40];
    sp[42] = sp[36] + sp[41];
    sp[43] = J_c0 * J_c4;
    sp[44] = J_c1 * J_c3;
    sp[45] = sp[43] + -1 * sp[44];
    sp[46] = sp[45] / sp[16];
    sp[47] = w0_d2_c1 * sp[46];
    sp[48] = sp[42] + sp[47];
    sp[49] = sp[5] / sp[16];
    sp[50] = w0_d0_c2 * sp[49];
    sp[51] = J_c3 * (-1 * J_c8);
    sp[52] = sp[7] + sp[51];
    sp[53] = sp[52] / sp[16];
    sp[54] = w0_d1_c2 * sp[53];
    sp[55] = sp[50] + sp[54];
    sp[56] = sp[14] / sp[16];
    sp[57] = w0_d2_c2 * sp[56];
    sp[58] = sp[55] + sp[57];
    sp[59] = sp[48] * sp[58];
    sp[60] = w0_d0_c2 * sp[35];
    sp[61] = w0_d1_c2 * sp[40];
    sp[62] = sp[60] + sp[61];
    sp[63] = w0_d2_c2 * sp[46];
    sp[64] = sp[62] + sp[63];
    sp[65] = w0_d0_c1 * sp[49];
    sp[66] = w0_d1_c1 * sp[53];
    sp[67] = sp[65] + sp[66];
    sp[68] = w0_d2_c1 * sp[56];
    sp[69] = sp[67] + sp[68];
    sp[70] = (1 + sp[64]) * sp[69];
    sp[71] = sp[59] + -1 * sp[70];
    sp[72] = w0_d0_c0 * sp[49];
    sp[73] = w0_d1_c0 * sp[53];
    sp[74] = sp[72] + sp[73];
    sp[75] = w0_d2_c0 * sp[56];
    sp[76] = sp[74] + sp[75];
    sp[77] = w0_d0_c1 * sp[17];
    sp[78] = w0_d1_c1 * sp[22];
    sp[79] = sp[77] + sp[78];
    sp[80] = w0_d2_c1 * sp[28];
    sp[81] = sp[79] + sp[80];
    sp[82] = (1 + sp[64]) * (1 + sp[81]);
    sp[83] = w0_d0_c2 * sp[17];
    sp[84] = w0_d1_c2 * sp[22];
    sp[85] = sp[83] + sp[84];
    sp[86] = w0_d2_c2 * sp[28];
    sp[87] = sp[85] + sp[86];
    sp[88] = sp[48] * sp[87];
    sp[89] = sp[82] + -1 * sp[88];
    sp[90] = (1 + sp[76]) * sp[89];
    sp[91] = sp[71] * sp[30];
    sp[92] = sp[90] + sp[91];
    sp[93] = sp[69] * sp[87];
    sp[94] = (1 + sp[81]) * sp[58];
    sp[95] = sp[93] + -1 * sp[94];
    sp[96] = w0_d0_c0 * sp[35];
    sp[97] = w0_d1_c0 * sp[40];
    sp[98] = sp[96] + sp[97];
    sp[99] = w0_d2_c0 * sp[46];
    sp[100] = sp[98] + sp[99];
    sp[101] = sp[95] * sp[100];
    sp[102] = sp[92] + sp[101];
    sp[103] = sp[71] / sp[102];
    sp[104] = 0.575 * sp[31] + -1 * (1.15 * sp[103]);
    sp[105] = std::log(sp[102]);
    sp[106] = 2 * sp[103] * sp[105];
    sp[107] = sp[104] + 28.17499999999998 * sp[106];
    sp[108] = w[1][1] * sp[107];
    sp[109] = 1 + sp[76] + (1 + sp[76]);
    sp[110] = sp[89] / sp[102];
    sp[111] = 0.575 * sp[109] + -1 * (1.15 * sp[110]);
    sp[112] = 2 * sp[110] * sp[105];
    sp[113] = sp[111] + 28.17499999999998 * sp[112];
    sp[114] = w[1][0] * sp[113];
    sp[115] = sp[108] + sp[114];
    sp[116] = sp[100] + sp[100];
    sp[117] = sp[95] / sp[102];
    sp[118] = 0.575 * sp[116] + -1 * (1.15 * sp[117]);
    sp[119] = 2 * sp[117] * sp[105];
    sp[120] = sp[118] + 28.17499999999998 * sp[119];
    sp[121] = w[1][2] * sp[120];
    sp[122] = sp[115] + sp[121];
    sp[123] = w[2][0] * sp[122];
    sp[124] = sp[69] + sp[69];
    sp[125] = sp[100] * sp[87];
    sp[126] = sp[30] * (-1 * (1 + sp[64]));
    sp[127] = sp[125] + sp[126];
    sp[128] = sp[127] / sp[102];
    sp[129] = 0.575 * sp[124] + -1 * (1.15 * sp[128]);
    sp[130] = 2 * sp[128] * sp[105];
    sp[131] = sp[129] + 28.17499999999998 * sp[130];
    sp[132] = w[1][0] * sp[131];
    sp[133] = 1 + sp[81] + (1 + sp[81]);
    sp[134] = (1 + sp[64]) * (1 + sp[76]);
    sp[135] = sp[100] * (-1 * sp[58]);
    sp[136] = sp[134] + sp[135];
    sp[137] = sp[136] / sp[102];
    sp[138] = 0.575 * sp[133] + -1 * (1.15 * sp[137]);
    sp[139] = 2 * sp[137] * sp[105];
    sp[140] = sp[138] + 28.17499999999998 * sp[139];
    sp[141] = w[1][1] * sp[140];
    sp[142] = sp[132] + sp[141];
    sp[143] = sp[48] + sp[48];
    sp[144] = sp[58] * sp[30];
    sp[145] = (1 + sp[76]) * (-1 * sp[87]);
    sp[146] = sp[144] + sp[145];
    sp[147] = sp[146] / sp[102];
    sp[148] = 0.575 * sp[143] + -1 * (1.15 * sp[147]);
    sp[149] = 2 * sp[147] * sp[105];
    sp[150] = sp[148] + 28.17499999999998 * sp[149];
    sp[151] = w[1][2] * sp[150];
    sp[152] = sp[142] + sp[151];
    sp[153] = w[2][1] * sp[152];
    sp[154] = sp[123] + sp[153];
    sp[155] = sp[58] + sp[58];
    sp[156] = sp[48] * sp[30];
    sp[157] = sp[100] * (-1 * (1 + sp[81]));
    sp[158] = sp[156] + sp[157];
    sp[159] = sp[158] / sp[102];
    sp[160] = 0.575 * sp[155] + -1 * (1.15 * sp[159]);
    sp[161] = 2 * sp[159] * sp[105];
    sp[162] = sp[160] + 28.17499999999998 * sp[161];
    sp[163] = w[1][0] * sp[162];
    sp[164] = sp[87] + sp[87];
    sp[165] = sp[100] * sp[69];
    sp[166] = (1 + sp[76]) * (-1 * sp[48]);
    sp[167] = sp[165] + sp[166];
    sp[168] = sp[167] / sp[102];
    sp[169] = 0.575 * sp[164] + -1 * (1.15 * sp[168]);
    sp[170] = 2 * sp[168] * sp[105];
    sp[171] = sp[169] + 28.17499999999998 * sp[170];
    sp[172] = w[1][1] * sp[171];
    sp[173] = sp[163] + sp[172];
    sp[174] = 1 + sp[64] + (1 + sp[64]);
    sp[175] = (1 + sp[76]) * (1 + sp[81]);
    sp[176] = sp[30] * (-1 * sp[69]);
    sp[177] = sp[175] + sp[176];
    sp[178] = sp[177] / sp[102];
    sp[179] = 0.575 * sp[174] + -1 * (1.15 * sp[178]);
    sp[180] = 2 * sp[178] * sp[105];
    sp[181] = sp[179] + 28.17499999999998 * sp[180];
    sp[182] = w[1][2] * sp[181];
    sp[183] = sp[173] + sp[182];
    sp[184] = w[2][2] * sp[183];
    sp[185] = sp[154] + sp[184];
    sp[186] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c3;
    sp[187] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c4;
    sp[188] = sp[186] + sp[187];
    sp[189] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[190] = sp[188] + sp[189];
    sp[191] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c6;
    sp[192] = tetrahedron_reference_facet_jacobian[facet][1][1] * J_c7;
    sp[193] = sp[191] + sp[192];
    sp[194] = tetrahedron_reference_facet_jacobian[facet][2][1] * J_c8;
    sp[195] = sp[193] + sp[194];
    sp[196] = sp[190] * sp[195];
    sp[197] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c3;
    sp[198] = J_c4 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[199] = sp[197] + sp[198];
    sp[200] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[201] = sp[199] + sp[200];
    sp[202] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c6;
    sp[203] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c7;
    sp[204] = sp[202] + sp[203];
    sp[205] = tetrahedron_reference_facet_jacobian[facet][2][0] * J_c8;
    sp[206] = sp[204] + sp[205];
    sp[207] = sp[201] * sp[206];
    sp[208] = sp[196] + -1 * sp[207];
    sp[209] = sp[208] * sp[208];
    sp[210] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][1];
    sp[211] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[212] = sp[210] + sp[211];
    sp[213] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[214] = sp[212] + sp[213];
    sp[215] = sp[214] * sp[206];
    sp[216] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][0];
    sp[217] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][0];
    sp[218] = sp[216] + sp[217];
    sp[219] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[220] = sp[218] + sp[219];
    sp[221] = sp[220] * sp[195];
    sp[222] = sp[215] + -1 * sp[221];
    sp[223] = sp[222] * sp[222];
    sp[224] = sp[209] + sp[223];
    sp[225] = sp[220] * sp[201];
    sp[226] = sp[190] * sp[214];
    sp[227] = sp[225] + -1 * sp[226];
    sp[228] = sp[227] * sp[227];
    sp[229] = sp[224] + sp[228];
    sp[230] = std::sqrt(sp[229]);
    sp[231] = sp[185] * sp[230];
    alignas(32) double BF0 = {};
    // Only 1 quadrature point, no loop
    {
        const double fw0 = sp[231] * weights1[0];
        BF0 += fw0;
    }
    A[0] = 0.0;
    A[0] += BF0;
}

extern "C" DLL_EXPORT ufc::exterior_facet_integral * create_ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_exterior_facet_integral_main_2()
{
  return new ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_exterior_facet_integral_main_2();
}


ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main() : ufc::form()
{
    // Do nothing
}

ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::~ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main()
{
    // Do nothing
}

const char * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::signature() const
{
    return "aa74be72bee991e5692b64bd469ae26837821371762ee81600905ccb9d51f5fc373614bff172fb2eed13c74280bf602b6d6f31f0f37cc79cb7e6fbb655bbc633";
}

std::size_t ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::rank() const
{
    return 0;
}

std::size_t ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::num_coefficients() const
{
    return 3;
}

std::size_t ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::original_coefficient_position(std::size_t i) const
{
    if (i >= 3)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2};
    return position[i];
}

ufc::finite_element * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_coordinate_finite_element() const
{
    return create_ffc_element_f584c0777d845bca9c9327c7a0db265c1ffc69a6_finite_element_main();
}

ufc::dofmap * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_coordinate_dofmap() const
{
    return create_ffc_element_f584c0777d845bca9c9327c7a0db265c1ffc69a6_dofmap_main();
}

ufc::coordinate_mapping * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_coordinate_mapping() const
{
    return create_ffc_coordinate_mapping_d199107d21d51672440efe2f1ea9a9082da0bf4f_coordinate_mapping_main();
}

ufc::finite_element * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_f584c0777d845bca9c9327c7a0db265c1ffc69a6_finite_element_main();
    case 1:
        return create_ffc_element_386b3fa9c81cf365711b8c62ecdc602470bb681f_finite_element_main();
    case 2:
        return create_ffc_element_386b3fa9c81cf365711b8c62ecdc602470bb681f_finite_element_main();
    default:
        return nullptr;
    }
}

ufc::dofmap * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_f584c0777d845bca9c9327c7a0db265c1ffc69a6_dofmap_main();
    case 1:
        return create_ffc_element_386b3fa9c81cf365711b8c62ecdc602470bb681f_dofmap_main();
    case 2:
        return create_ffc_element_386b3fa9c81cf365711b8c62ecdc602470bb681f_dofmap_main();
    default:
        return nullptr;
    }
}

std::size_t ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::max_exterior_facet_subdomain_id() const
{
    return 3;
}

std::size_t ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::has_cell_integrals() const
{
    return false;
}

bool ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::has_exterior_facet_integrals() const
{
    return true;
}

bool ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::has_interior_facet_integrals() const
{
    return false;
}

bool ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::has_custom_integrals() const
{
    return false;
}

bool ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::has_interface_integrals() const
{
    return false;
}

bool ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    switch (subdomain_id)
    {
    case 2:
        return create_ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_exterior_facet_integral_main_2();
    default:
        return nullptr;
    }
}

ufc::interior_facet_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_default_cell_integral() const
{
    return nullptr;
}

ufc::exterior_facet_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main::create_default_overlap_integral() const
{
    return nullptr;
}

extern "C" DLL_EXPORT ufc::form * create_ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main()
{
  return new ffc_form_6603204335ef394b4f43557b66ec11eda033ae19_form_main();
}

